
Task13_TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000214  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b49  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082b  00000000  00000000  00000ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000592  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000420  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c4  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 76 00 	call	0xec	; 0xec <main>
  7a:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GPIO_InitPin>:
#include "gpio.h"

void GPIO_InitPin(volatile uint8_t *ddr, uint8_t pin, uint8_t direction) {
  82:	fc 01       	movw	r30, r24
	if (direction == OUTPUT)
  84:	41 30       	cpi	r20, 0x01	; 1
  86:	59 f4       	brne	.+22     	; 0x9e <GPIO_InitPin+0x1c>
	*ddr |= (1 << pin);
  88:	20 81       	ld	r18, Z
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <GPIO_InitPin+0x12>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	6a 95       	dec	r22
  96:	e2 f7       	brpl	.-8      	; 0x90 <GPIO_InitPin+0xe>
  98:	82 2b       	or	r24, r18
  9a:	80 83       	st	Z, r24
  9c:	08 95       	ret
	else
	*ddr &= ~(1 << pin);
  9e:	90 81       	ld	r25, Z
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <GPIO_InitPin+0x28>
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <GPIO_InitPin+0x24>
  ae:	20 95       	com	r18
  b0:	29 23       	and	r18, r25
  b2:	20 83       	st	Z, r18
  b4:	08 95       	ret

000000b6 <GPIO_WritePin>:
}

void GPIO_WritePin(volatile uint8_t *port, uint8_t pin, uint8_t value) {
	if (value)
  b6:	44 23       	and	r20, r20
  b8:	61 f0       	breq	.+24     	; 0xd2 <GPIO_WritePin+0x1c>
	*port |= (1 << pin);
  ba:	fc 01       	movw	r30, r24
  bc:	40 81       	ld	r20, Z
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <GPIO_WritePin+0x12>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <GPIO_WritePin+0xe>
  cc:	24 2b       	or	r18, r20
  ce:	20 83       	st	Z, r18
  d0:	08 95       	ret
	else
	*port &= ~(1 << pin);
  d2:	fc 01       	movw	r30, r24
  d4:	40 81       	ld	r20, Z
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <GPIO_WritePin+0x2a>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <GPIO_WritePin+0x26>
  e4:	20 95       	com	r18
  e6:	24 23       	and	r18, r20
  e8:	20 83       	st	Z, r18
  ea:	08 95       	ret

000000ec <main>:
#include <util/delay.h>

#include "traffic_light.h"

int main(void) {
	TrafficLight_Init();
  ec:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TrafficLight_Init>
	while (1) {
		TrafficLight_Run();
  f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TrafficLight_Run>
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <main+0x4>

000000f6 <SevenSeg_Init>:
	0x3F, 0x06, 0x5B, 0x4F, 0x66,
	0x6D, 0x7D, 0x07, 0x7F, 0x6F
};

void SevenSeg_Init(void) {
	DDRC = 0xFF;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	84 bb       	out	0x14, r24	; 20
	DDRB |= (1 << PB0) | (1 << PB1);
  fa:	87 b3       	in	r24, 0x17	; 23
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret

00000102 <SevenSeg_DisplayNumber>:
}

void SevenSeg_DisplayNumber(uint8_t num) {
	uint8_t tens = num / 10;
 102:	ed ec       	ldi	r30, 0xCD	; 205
 104:	8e 9f       	mul	r24, r30
 106:	e1 2d       	mov	r30, r1
 108:	11 24       	eor	r1, r1
 10a:	e6 95       	lsr	r30
 10c:	e6 95       	lsr	r30
 10e:	e6 95       	lsr	r30
	uint8_t ones = num % 10;
 110:	2e 2f       	mov	r18, r30
 112:	22 0f       	add	r18, r18
 114:	92 2f       	mov	r25, r18
 116:	99 0f       	add	r25, r25
 118:	99 0f       	add	r25, r25
 11a:	92 0f       	add	r25, r18
 11c:	89 1b       	sub	r24, r25
 11e:	98 2f       	mov	r25, r24

	PORTB |= (1 << PB0) | (1 << PB1);
 120:	88 b3       	in	r24, 0x18	; 24
 122:	83 60       	ori	r24, 0x03	; 3
 124:	88 bb       	out	0x18, r24	; 24
	PORTC = segDigits[tens];
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	e0 5a       	subi	r30, 0xA0	; 160
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 81       	ld	r24, Z
 12e:	85 bb       	out	0x15, r24	; 21
	PORTB &= ~(1 << PB0);
 130:	88 b3       	in	r24, 0x18	; 24
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	ed ee       	ldi	r30, 0xED	; 237
 138:	f2 e0       	ldi	r31, 0x02	; 2
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <SevenSeg_DisplayNumber+0x38>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <SevenSeg_DisplayNumber+0x3e>
 140:	00 00       	nop
	_delay_ms(3);
	PORTB |= (1 << PB0);
 142:	88 b3       	in	r24, 0x18	; 24
 144:	81 60       	ori	r24, 0x01	; 1
 146:	88 bb       	out	0x18, r24	; 24

	PORTC = segDigits[ones];
 148:	e9 2f       	mov	r30, r25
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	e0 5a       	subi	r30, 0xA0	; 160
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	80 81       	ld	r24, Z
 152:	85 bb       	out	0x15, r24	; 21
	PORTB &= ~(1 << PB1);
 154:	88 b3       	in	r24, 0x18	; 24
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	88 bb       	out	0x18, r24	; 24
 15a:	8d ee       	ldi	r24, 0xED	; 237
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <SevenSeg_DisplayNumber+0x5c>
 162:	00 c0       	rjmp	.+0      	; 0x164 <SevenSeg_DisplayNumber+0x62>
 164:	00 00       	nop
	_delay_ms(3);
	PORTB |= (1 << PB1);
 166:	88 b3       	in	r24, 0x18	; 24
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	88 bb       	out	0x18, r24	; 24
 16c:	08 95       	ret

0000016e <Countdown_Display>:
	GPIO_InitPin(&DDRA, YELLOW_PIN, OUTPUT);
	GPIO_InitPin(&DDRA, GREEN_PIN, OUTPUT);
	SevenSeg_Init();
}

static void Countdown_Display(uint8_t seconds, uint8_t led_pin) {
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	08 2f       	mov	r16, r24
 17a:	f6 2e       	mov	r15, r22
	GPIO_WritePin(&PORTA, led_pin, HIGH);
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	8b e3       	ldi	r24, 0x3B	; 59
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_WritePin>
	for (int s = seconds; s > 0; s--) {
 186:	10 e0       	ldi	r17, 0x00	; 0
 188:	12 c0       	rjmp	.+36     	; 0x1ae <Countdown_Display+0x40>
		for (int i = 0; i < 200; i++) {
			SevenSeg_DisplayNumber(s);
 18a:	80 2f       	mov	r24, r16
 18c:	0e 94 81 00 	call	0x102	; 0x102 <SevenSeg_DisplayNumber>
 190:	81 ee       	ldi	r24, 0xE1	; 225
 192:	94 e0       	ldi	r25, 0x04	; 4
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <Countdown_Display+0x26>
 198:	00 c0       	rjmp	.+0      	; 0x19a <Countdown_Display+0x2c>
 19a:	00 00       	nop
}

static void Countdown_Display(uint8_t seconds, uint8_t led_pin) {
	GPIO_WritePin(&PORTA, led_pin, HIGH);
	for (int s = seconds; s > 0; s--) {
		for (int i = 0; i < 200; i++) {
 19c:	21 96       	adiw	r28, 0x01	; 1
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <Countdown_Display+0x36>
 1a0:	c0 e0       	ldi	r28, 0x00	; 0
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	c8 3c       	cpi	r28, 0xC8	; 200
 1a6:	d1 05       	cpc	r29, r1
 1a8:	84 f3       	brlt	.-32     	; 0x18a <Countdown_Display+0x1c>
	SevenSeg_Init();
}

static void Countdown_Display(uint8_t seconds, uint8_t led_pin) {
	GPIO_WritePin(&PORTA, led_pin, HIGH);
	for (int s = seconds; s > 0; s--) {
 1aa:	01 50       	subi	r16, 0x01	; 1
 1ac:	11 09       	sbc	r17, r1
 1ae:	10 16       	cp	r1, r16
 1b0:	11 06       	cpc	r1, r17
 1b2:	b4 f3       	brlt	.-20     	; 0x1a0 <Countdown_Display+0x32>
		for (int i = 0; i < 200; i++) {
			SevenSeg_DisplayNumber(s);
			_delay_ms(5);
		}
	}
	GPIO_WritePin(&PORTA, led_pin, LOW);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	6f 2d       	mov	r22, r15
 1b8:	8b e3       	ldi	r24, 0x3B	; 59
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_WritePin>
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	08 95       	ret

000001cc <TrafficLight_Init>:
#define RED_PIN     PA0
#define YELLOW_PIN  PA1
#define GREEN_PIN   PA2

void TrafficLight_Init(void) {
	GPIO_InitPin(&DDRA, RED_PIN, OUTPUT);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	8a e3       	ldi	r24, 0x3A	; 58
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_InitPin>
	GPIO_InitPin(&DDRA, YELLOW_PIN, OUTPUT);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	8a e3       	ldi	r24, 0x3A	; 58
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_InitPin>
	GPIO_InitPin(&DDRA, GREEN_PIN, OUTPUT);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	62 e0       	ldi	r22, 0x02	; 2
 1e8:	8a e3       	ldi	r24, 0x3A	; 58
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_InitPin>
	SevenSeg_Init();
 1f0:	0e 94 7b 00 	call	0xf6	; 0xf6 <SevenSeg_Init>
 1f4:	08 95       	ret

000001f6 <TrafficLight_Run>:
	}
	GPIO_WritePin(&PORTA, led_pin, LOW);
}

void TrafficLight_Run(void) {
	Countdown_Display(15, RED_PIN);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	8f e0       	ldi	r24, 0x0F	; 15
 1fa:	0e 94 b7 00 	call	0x16e	; 0x16e <Countdown_Display>
	Countdown_Display(5,  YELLOW_PIN);
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	85 e0       	ldi	r24, 0x05	; 5
 202:	0e 94 b7 00 	call	0x16e	; 0x16e <Countdown_Display>
	Countdown_Display(10, GREEN_PIN);
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	8a e0       	ldi	r24, 0x0A	; 10
 20a:	0e 94 b7 00 	call	0x16e	; 0x16e <Countdown_Display>
 20e:	08 95       	ret

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
