
switch-controlled DC motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d18  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a3  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004af  00000000  00000000  000017e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009a  00000000  00000000  0000211a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 94 00 	call	0x128	; 0x128 <main>
  64:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_InitPin>:
#include "gpio.h"

void GPIO_InitPin(volatile uint8_t *ddr, uint8_t pin, uint8_t direction) {
  6c:	fc 01       	movw	r30, r24
	if (direction == OUTPUT)
  6e:	41 30       	cpi	r20, 0x01	; 1
  70:	59 f4       	brne	.+22     	; 0x88 <GPIO_InitPin+0x1c>
	*ddr |= (1 << pin);
  72:	20 81       	ld	r18, Z
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <GPIO_InitPin+0x12>
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	6a 95       	dec	r22
  80:	e2 f7       	brpl	.-8      	; 0x7a <GPIO_InitPin+0xe>
  82:	82 2b       	or	r24, r18
  84:	80 83       	st	Z, r24
  86:	08 95       	ret
	else
	*ddr &= ~(1 << pin);
  88:	90 81       	ld	r25, Z
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <GPIO_InitPin+0x28>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	6a 95       	dec	r22
  96:	e2 f7       	brpl	.-8      	; 0x90 <GPIO_InitPin+0x24>
  98:	20 95       	com	r18
  9a:	29 23       	and	r18, r25
  9c:	20 83       	st	Z, r18
  9e:	08 95       	ret

000000a0 <GPIO_WritePin>:
}

void GPIO_WritePin(volatile uint8_t *port, uint8_t pin, uint8_t value) {
	if (value)
  a0:	44 23       	and	r20, r20
  a2:	61 f0       	breq	.+24     	; 0xbc <GPIO_WritePin+0x1c>
	*port |= (1 << pin);
  a4:	fc 01       	movw	r30, r24
  a6:	40 81       	ld	r20, Z
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <GPIO_WritePin+0x12>
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <GPIO_WritePin+0xe>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret
	else
	*port &= ~(1 << pin);
  bc:	fc 01       	movw	r30, r24
  be:	40 81       	ld	r20, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <GPIO_WritePin+0x2a>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <GPIO_WritePin+0x26>
  ce:	20 95       	com	r18
  d0:	24 23       	and	r18, r20
  d2:	20 83       	st	Z, r18
  d4:	08 95       	ret

000000d6 <GPIO_ReadPin>:
}

uint8_t GPIO_ReadPin(volatile uint8_t *pin_reg, uint8_t pin) {
	return ((*pin_reg & (1 << pin)) != 0);
  d6:	fc 01       	movw	r30, r24
  d8:	80 81       	ld	r24, Z
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <GPIO_ReadPin+0xc>
  de:	95 95       	asr	r25
  e0:	87 95       	ror	r24
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <GPIO_ReadPin+0x8>
}
  e6:	81 70       	andi	r24, 0x01	; 1
  e8:	08 95       	ret

000000ea <Switch_Init>:
#define SW_BACKWARD PD2
#define SW_LEFT     PD3
#define SW_RIGHT    PD4

void Switch_Init(void) {
	GPIO_InitPin(&DDRB, SW_STOP, INPUT);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	87 e3       	ldi	r24, 0x37	; 55
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPin>
	GPIO_InitPin(&DDRB, SW_FORWARD, INPUT);
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	87 e3       	ldi	r24, 0x37	; 55
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPin>
	GPIO_InitPin(&DDRB, SW_BACKWARD, INPUT);
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	87 e3       	ldi	r24, 0x37	; 55
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPin>
	GPIO_InitPin(&DDRB, SW_LEFT, INPUT);
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	87 e3       	ldi	r24, 0x37	; 55
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPin>
	GPIO_InitPin(&DDRB, SW_RIGHT, INPUT);
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	64 e0       	ldi	r22, 0x04	; 4
 11e:	87 e3       	ldi	r24, 0x37	; 55
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPin>
 126:	08 95       	ret

00000128 <main>:
}

int main(void) {
	Switch_Init();
 128:	0e 94 75 00 	call	0xea	; 0xea <Switch_Init>
	Motor_Init();
 12c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Motor_Init>

	while (1) {
		if (GPIO_ReadPin(&PINB, SW_STOP)) {
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	86 e3       	ldi	r24, 0x36	; 54
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_ReadPin>
 13a:	88 23       	and	r24, r24
 13c:	19 f0       	breq	.+6      	; 0x144 <main+0x1c>
			Motor_Stop();
 13e:	0e 94 ca 00 	call	0x194	; 0x194 <Motor_Stop>
 142:	f6 cf       	rjmp	.-20     	; 0x130 <main+0x8>
		}
		else if (GPIO_ReadPin(&PINB, SW_FORWARD)) {
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	86 e3       	ldi	r24, 0x36	; 54
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_ReadPin>
 14e:	88 23       	and	r24, r24
 150:	19 f0       	breq	.+6      	; 0x158 <main+0x30>
			Motor_Forward();
 152:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Motor_Forward>
 156:	ec cf       	rjmp	.-40     	; 0x130 <main+0x8>
		}
		else if (GPIO_ReadPin(&PINB, SW_BACKWARD)) {
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	86 e3       	ldi	r24, 0x36	; 54
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_ReadPin>
 162:	88 23       	and	r24, r24
 164:	19 f0       	breq	.+6      	; 0x16c <main+0x44>
			Motor_Backward();
 166:	0e 94 17 01 	call	0x22e	; 0x22e <Motor_Backward>
 16a:	e2 cf       	rjmp	.-60     	; 0x130 <main+0x8>
		}
		else if (GPIO_ReadPin(&PINB, SW_LEFT)) {
 16c:	63 e0       	ldi	r22, 0x03	; 3
 16e:	86 e3       	ldi	r24, 0x36	; 54
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_ReadPin>
 176:	88 23       	and	r24, r24
 178:	19 f0       	breq	.+6      	; 0x180 <main+0x58>
			Motor_Left();
 17a:	0e 94 30 01 	call	0x260	; 0x260 <Motor_Left>
 17e:	d8 cf       	rjmp	.-80     	; 0x130 <main+0x8>
		}
		else if (GPIO_ReadPin(&PINB, SW_RIGHT)) {
 180:	64 e0       	ldi	r22, 0x04	; 4
 182:	86 e3       	ldi	r24, 0x36	; 54
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_ReadPin>
 18a:	88 23       	and	r24, r24
 18c:	89 f2       	breq	.-94     	; 0x130 <main+0x8>
			Motor_Right();
 18e:	0e 94 49 01 	call	0x292	; 0x292 <Motor_Right>
 192:	ce cf       	rjmp	.-100    	; 0x130 <main+0x8>

00000194 <Motor_Stop>:
	GPIO_InitPin(&DDRA, M2_IN4, OUTPUT);
	Motor_Stop();
}

void Motor_Stop(void) {
	GPIO_WritePin(&PORTA, M1_IN1, LOW);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	8b e3       	ldi	r24, 0x3B	; 59
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M1_IN2, LOW);
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	8b e3       	ldi	r24, 0x3B	; 59
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M2_IN3, LOW);
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	8b e3       	ldi	r24, 0x3B	; 59
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M2_IN4, LOW);
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	63 e0       	ldi	r22, 0x03	; 3
 1bc:	8b e3       	ldi	r24, 0x3B	; 59
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
 1c4:	08 95       	ret

000001c6 <Motor_Init>:
#define M1_IN2 PA1
#define M2_IN3 PA2
#define M2_IN4 PA3

void Motor_Init(void) {
	GPIO_InitPin(&DDRA, M1_IN1, OUTPUT);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	8a e3       	ldi	r24, 0x3A	; 58
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPin>
	GPIO_InitPin(&DDRA, M1_IN2, OUTPUT);
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	8a e3       	ldi	r24, 0x3A	; 58
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPin>
	GPIO_InitPin(&DDRA, M2_IN3, OUTPUT);
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	62 e0       	ldi	r22, 0x02	; 2
 1e2:	8a e3       	ldi	r24, 0x3A	; 58
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPin>
	GPIO_InitPin(&DDRA, M2_IN4, OUTPUT);
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	63 e0       	ldi	r22, 0x03	; 3
 1ee:	8a e3       	ldi	r24, 0x3A	; 58
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPin>
	Motor_Stop();
 1f6:	0e 94 ca 00 	call	0x194	; 0x194 <Motor_Stop>
 1fa:	08 95       	ret

000001fc <Motor_Forward>:
	GPIO_WritePin(&PORTA, M2_IN3, LOW);
	GPIO_WritePin(&PORTA, M2_IN4, LOW);
}

void Motor_Forward(void) {
	GPIO_WritePin(&PORTA, M1_IN1, HIGH);
 1fc:	41 e0       	ldi	r20, 0x01	; 1
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	8b e3       	ldi	r24, 0x3B	; 59
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M1_IN2, LOW);
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	8b e3       	ldi	r24, 0x3B	; 59
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M2_IN3, HIGH);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	8b e3       	ldi	r24, 0x3B	; 59
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M2_IN4, LOW);
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	63 e0       	ldi	r22, 0x03	; 3
 224:	8b e3       	ldi	r24, 0x3B	; 59
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
 22c:	08 95       	ret

0000022e <Motor_Backward>:
}

void Motor_Backward(void) {
	GPIO_WritePin(&PORTA, M1_IN1, LOW);
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	8b e3       	ldi	r24, 0x3B	; 59
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M1_IN2, HIGH);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	8b e3       	ldi	r24, 0x3B	; 59
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M2_IN3, LOW);
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	8b e3       	ldi	r24, 0x3B	; 59
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M2_IN4, HIGH);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	8b e3       	ldi	r24, 0x3B	; 59
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
 25e:	08 95       	ret

00000260 <Motor_Left>:
}

void Motor_Left(void) {
	GPIO_WritePin(&PORTA, M1_IN1, LOW);
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	8b e3       	ldi	r24, 0x3B	; 59
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M1_IN2, HIGH);
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	8b e3       	ldi	r24, 0x3B	; 59
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M2_IN3, HIGH);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	8b e3       	ldi	r24, 0x3B	; 59
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M2_IN4, LOW);
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	8b e3       	ldi	r24, 0x3B	; 59
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
 290:	08 95       	ret

00000292 <Motor_Right>:
}

void Motor_Right(void) {
	GPIO_WritePin(&PORTA, M1_IN1, HIGH);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	8b e3       	ldi	r24, 0x3B	; 59
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M1_IN2, LOW);
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	8b e3       	ldi	r24, 0x3B	; 59
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M2_IN3, LOW);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	8b e3       	ldi	r24, 0x3B	; 59
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
	GPIO_WritePin(&PORTA, M2_IN4, HIGH);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	8b e3       	ldi	r24, 0x3B	; 59
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_WritePin>
 2c2:	08 95       	ret

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
